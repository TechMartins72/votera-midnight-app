pragma language_version >= 0.16.0;

import CompactStandardLibrary;

enum candidate {Joseph, Elliot, Samir}

export ledger voters: Set<Bytes<32>>;
export ledger instance: Counter;
export ledger votes: Map<candidate, Counter>;
export ledger person: Bytes<32>;

constructor() {
    instance.increment(1);
    votes.insert(candidate.Joseph, default<Counter>);
    votes.insert(candidate.Samir, default<Counter>);
    votes.insert(candidate.Elliot, default<Counter>);
}

witness local_secret_key(): Bytes<32>;

export circuit vote(_age: Uint<32>, _country: Bytes<16>, _candidate: candidate): [] {
    assert(!voters.member(person), "You can't vote twice!");
    assert(_age >= 18, "You are too young to vote");
    assert(_country == pad(16 ,"nigeria"), "Non - Nigerian Citizens are not allowed to vote");
    person = disclose(public_key(local_secret_key(), instance as Field as Bytes<32>));

    if (votes.member(disclose(_candidate))) {
        votes.lookup(disclose(_candidate)).increment(1);
    } else {
        return;
    }
    voters.insert(person);
}

export circuit public_key(sk: Bytes<32>, _instance: Bytes<32>): Bytes<32> {
    return persistentHash<Vector<3, Bytes<32>>>([pad(32, "votera:pk:"), _instance, sk]);
}